{"title":"字典数排序","slug":"字典数排序","date":"2018-05-01T00:00:49.000Z","updated":"2023-09-08T06:12:36.704Z","comments":true,"path":"api/articles/字典数排序.json","excerpt":null,"covers":null,"content":"<h2 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h2><p>给定一个整数 n, 返回从 1 到 n 的字典顺序。</p>\n<p>例如，</p>\n<p>给定 n &#x3D;1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。</p>\n<p>请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据 n 小于等于 5,000,000。  </p>\n<h2 id=\"解题过程\"><a href=\"#解题过程\" class=\"headerlink\" title=\"解题过程\"></a>解题过程</h2><p>初次接触这题,我试图用快速排序,堆排序等排序方式去解决该问题，但是程序运行之后，要么内存不足,要么复杂度达不到时间要求。<br>经过两天的瞎折腾，我突然茅塞顿开，找到了以下规律。  </p>\n<p>如果n&lt;10,则1后面的数字为2，否则1后面的数组为10。  </p>\n<p>如果n&lt;20,则2后面的数字为3，否则1后面的数组为20。  </p>\n<p>如果n&lt;30,则3后面的数字为4，否则1后面的数组为30。  </p>\n<p>经总结如下</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果m&lt;<span class=\"built_in\">n</span></span><br><span class=\"line\">   如果 m*<span class=\"number\">10</span>&lt;=<span class=\"built_in\">n</span></span><br><span class=\"line\">   则下一位为m*<span class=\"number\">10</span></span><br><span class=\"line\">   否则下一位为m+<span class=\"number\">1</span>;</span><br><span class=\"line\">否则</span><br><span class=\"line\">   结束。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>创建二叉树的类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 二叉树</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> Globalvalue = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode leftNode;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode rightNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;x&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">value</span> = x;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> leftvalue = x * <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> rightvalue = x + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftvalue &lt;= Globalvalue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            leftNode = <span class=\"keyword\">new</span> TreeNode(leftvalue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rightvalue &lt;= Globalvalue &amp;&amp; rightvalue % <span class=\"number\">10</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rightNode = <span class=\"keyword\">new</span> TreeNode(rightvalue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉树的前序遍历</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 前序遍历</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;tn&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;result&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">public void pre<span class=\"constructor\">Order(TreeNode <span class=\"params\">tn</span>, List&lt;<span class=\"params\">int</span>&gt; <span class=\"params\">result</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    result.<span class=\"constructor\">Add(<span class=\"params\">tn</span>.<span class=\"params\">value</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tn.leftNode != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pre<span class=\"constructor\">Order(<span class=\"params\">tn</span>.<span class=\"params\">leftNode</span>, <span class=\"params\">result</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tn.rightNode != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pre<span class=\"constructor\">Order(<span class=\"params\">tn</span>.<span class=\"params\">rightNode</span>, <span class=\"params\">result</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用前序排序方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 执行排序</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;n&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IList&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">LexicalOrder</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TreeNode.Globalvalue = n;</span><br><span class=\"line\">    TreeNode tn = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    List&lt;<span class=\"built_in\">int</span>&gt; result = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">    preOrder(tn, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>该方案并不是通过测试用例耗时最短的方法，毕竟不构造TreeNode类速度会更快，但是恰好复习了一下大学时候所学的二叉树遍历的相关知识,也是挺好的。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://leetcode-cn.com/submissions/detail/1564059/\">字典序排数解题过程</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/lexicographical-numbers/description/\">386. 字典序排数</a></li>\n</ul>\n","more":"<h2 id=\"题目内容\"><a href=\"#题目内容\" class=\"headerlink\" title=\"题目内容\"></a>题目内容</h2><p>给定一个整数 n, 返回从 1 到 n 的字典顺序。</p>\n<p>例如，</p>\n<p>给定 n &#x3D;1 3，返回 [1,10,11,12,13,2,3,4,5,6,7,8,9] 。</p>\n<p>请尽可能的优化算法的时间复杂度和空间复杂度。 输入的数据 n 小于等于 5,000,000。  </p>\n<h2 id=\"解题过程\"><a href=\"#解题过程\" class=\"headerlink\" title=\"解题过程\"></a>解题过程</h2><p>初次接触这题,我试图用快速排序,堆排序等排序方式去解决该问题，但是程序运行之后，要么内存不足,要么复杂度达不到时间要求。<br>经过两天的瞎折腾，我突然茅塞顿开，找到了以下规律。  </p>\n<p>如果n&lt;10,则1后面的数字为2，否则1后面的数组为10。  </p>\n<p>如果n&lt;20,则2后面的数字为3，否则1后面的数组为20。  </p>\n<p>如果n&lt;30,则3后面的数字为4，否则1后面的数组为30。  </p>\n<p>经总结如下</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果m&lt;<span class=\"built_in\">n</span></span><br><span class=\"line\">   如果 m*<span class=\"number\">10</span>&lt;=<span class=\"built_in\">n</span></span><br><span class=\"line\">   则下一位为m*<span class=\"number\">10</span></span><br><span class=\"line\">   否则下一位为m+<span class=\"number\">1</span>;</span><br><span class=\"line\">否则</span><br><span class=\"line\">   结束。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><p>创建二叉树的类</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 二叉树</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">TreeNode</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> Globalvalue = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> <span class=\"keyword\">value</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode leftNode;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> TreeNode rightNode;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> 构造函数</span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;x&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TreeNode</span>(<span class=\"params\"><span class=\"built_in\">int</span> x</span>)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">value</span> = x;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> leftvalue = x * <span class=\"number\">10</span>;</span><br><span class=\"line\">        <span class=\"built_in\">int</span> rightvalue = x + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftvalue &lt;= Globalvalue)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            leftNode = <span class=\"keyword\">new</span> TreeNode(leftvalue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rightvalue &lt;= Globalvalue &amp;&amp; rightvalue % <span class=\"number\">10</span> != <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rightNode = <span class=\"keyword\">new</span> TreeNode(rightvalue);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>二叉树的前序遍历</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 前序遍历</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;tn&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;param name=&quot;result&quot;&gt;&lt;/param&gt;</span></span><br><span class=\"line\">public void pre<span class=\"constructor\">Order(TreeNode <span class=\"params\">tn</span>, List&lt;<span class=\"params\">int</span>&gt; <span class=\"params\">result</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    result.<span class=\"constructor\">Add(<span class=\"params\">tn</span>.<span class=\"params\">value</span>)</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tn.leftNode != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pre<span class=\"constructor\">Order(<span class=\"params\">tn</span>.<span class=\"params\">leftNode</span>, <span class=\"params\">result</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (tn.rightNode != null)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pre<span class=\"constructor\">Order(<span class=\"params\">tn</span>.<span class=\"params\">rightNode</span>, <span class=\"params\">result</span>)</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>调用前序排序方法。</p>\n<figure class=\"highlight csharp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> 执行排序</span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;/summary&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;param name=&quot;n&quot;&gt;</span><span class=\"doctag\">&lt;/param&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\"><span class=\"doctag\">///</span> <span class=\"doctag\">&lt;returns&gt;</span><span class=\"doctag\">&lt;/returns&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> IList&lt;<span class=\"built_in\">int</span>&gt; <span class=\"title\">LexicalOrder</span>(<span class=\"params\"><span class=\"built_in\">int</span> n</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    TreeNode.Globalvalue = n;</span><br><span class=\"line\">    TreeNode tn = <span class=\"keyword\">new</span> TreeNode(<span class=\"number\">1</span>);</span><br><span class=\"line\">    List&lt;<span class=\"built_in\">int</span>&gt; result = <span class=\"keyword\">new</span> List&lt;<span class=\"built_in\">int</span>&gt;();</span><br><span class=\"line\">    preOrder(tn, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>该方案并不是通过测试用例耗时最短的方法，毕竟不构造TreeNode类速度会更快，但是恰好复习了一下大学时候所学的二叉树遍历的相关知识,也是挺好的。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://leetcode-cn.com/submissions/detail/1564059/\">字典序排数解题过程</a></li>\n<li><a href=\"https://leetcode-cn.com/problems/lexicographical-numbers/description/\">386. 字典序排数</a></li>\n</ul>\n","categories":[{"name":"逻辑思维","path":"api/categories/逻辑思维.json"}],"tags":[{"name":"逆向思维","path":"api/tags/逆向思维.json"},{"name":"LeetCode","path":"api/tags/LeetCode.json"}]}
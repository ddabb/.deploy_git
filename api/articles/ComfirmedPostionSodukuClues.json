{"title":"迟到的元旦快乐","slug":"ComfirmedPostionSodukuClues","date":"2019-01-10T13:15:08.000Z","updated":"2023-09-08T06:12:36.540Z","comments":true,"path":"api/articles/ComfirmedPostionSodukuClues.json","excerpt":null,"covers":["/photos/images/元初始状态.png","/photos/images/旦初始状态.png","/photos/images/快初始状态.png","/photos/images/乐初始状态.png","/photos/images/元.png","/photos/images/旦.png","/photos/images/快.png","/photos/images/乐.png"],"content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>在元旦之前，本想炫技生成漂亮的数独图案的题目然后发在朋友圈祝朋友们节日快乐。可惜是技术实在不过关。</p>\n<h1 id=\"数独图形\"><a href=\"#数独图形\" class=\"headerlink\" title=\"数独图形\"></a>数独图形</h1><p>在资深的数独迷眼里,标准数独是指通过盘面上的所有提示数字，有且仅有唯一解。<br>以下四个图形，虽说有“元旦快乐”的四个字样，但是并不具备唯一解。  </p>\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/元初始状态.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/旦初始状态.png\"></div>\n</div>\n\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/快初始状态.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/乐初始状态.png\"></div>\n</div>\n\n<p>我们可以经由DLX算法可以快速得知<br>以上“元旦快乐”四个数字的可能解的个数是分别是512,8388,66,285。</p>\n<h1 id=\"标准数独的基本条件\"><a href=\"#标准数独的基本条件\" class=\"headerlink\" title=\"标准数独的基本条件\"></a>标准数独的基本条件</h1><blockquote>\n<p>盘面至少<strong>17</strong>个数字。<br>每一大行中没有两个空行,即第一，二，三行必须有两行存在数字。<br>每一大列中没有两个空列,即第一，二，三列必须有两列存在数字。<br>盘面至少有<strong>8</strong>个不同的已知数字。<br>即<strong>元</strong>字的r3c8会有个<strong>2</strong>的存在是为了避免第一和第三行可以互换,不满足数独唯一性的必要条件。</p>\n</blockquote>\n<h1 id=\"求解过程\"><a href=\"#求解过程\" class=\"headerlink\" title=\"求解过程\"></a>求解过程</h1><p>以元字的表达式为例</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> before = <span class=\"keyword\">new</span> <span class=\"type\">DanceLink</span>().solution_count(<span class=\"string\">&quot;000000000001234500000000020134659782000308000000402000000703004009006007070001358&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 元的第一个已知数据和第二个已知数据交换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> after  = <span class=\"keyword\">new</span> <span class=\"type\">DanceLink</span>().solution_count(<span class=\"string\">&quot;000000000002134500000000020134659782000308000000402000000703004009006007070001358&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果是</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">before</span> <span class=\"operator\">=</span> <span class=\"number\">512</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">after</span>  <span class=\"operator\">=</span> <span class=\"number\">312</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>所以最终解可以由after的表达式进行进一步的两两交换去生成。<br>由因为A的已知数据是30个，所以位置的交换有30*29/2=435种。<br>整个交换的执行流程如下：<br>1、建立一个尝试字典集tryDic,键是数独的表达式,值是数独的结果的可能个数。<br>2、30个位置进行组合，生成435个包含两个位置的集合。<br>3、数独表达式交换前后分别记为before,after,解的个数分别记作b,a,将before,after及其结果数存入tryDic。<br>4、对435个集合进行遍历,若a!=0,且a小于b,则before=after;<br>5、很有可能第一轮排列组合之后,a并不等于1;没有找到唯一解的数独表达式,选取tryDic的结果个数最多的字符串S出来作为下一轮循环的因子。<br>6、循环执行1~5的过程，<strong>注意步骤5中的字符串S应该是过往循环中没有使用过的，否则会陷入死循环。</strong></p>\n<p>书上以</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">001000009000200046007080000000001000003000200000500000000030800960007000200000500</span><br></pre></td></tr></table></figure>\n<p>这个18个提示数的数独作为例子作为讲解，我也通过以上流程生成了一个18个提示数的标准数独。</p>\n<blockquote>\n<p>借助书上的说法,除了聪明和运气，我们别无他法。</p>\n</blockquote>\n<h1 id=\"标准数独-元旦快乐\"><a href=\"#标准数独-元旦快乐\" class=\"headerlink\" title=\"标准数独(元旦快乐)\"></a>标准数独(元旦快乐)</h1><p>最终生成的结果如下，难度不大。</p>\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/元.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/旦.png\"></div>\n</div>\n\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/快.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/乐.png\"></div>\n</div>\n\n<h1 id=\"逆向思维\"><a href=\"#逆向思维\" class=\"headerlink\" title=\"逆向思维\"></a>逆向思维</h1><p>由以上位置找固定数独的位置可知，如果标准数独去掉某个提示数，不在构成唯一解，但是满足构成标准数独的基本条件,则可能通过两两交换的生成一个新的标准数独。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.cnblogs.com/zhao-yi/p/8533035.html\">C#实现排列、组合</a></li>\n<li><a href=\"https://github.com/ddabb/soduku\">C#源码</a></li>\n</ul>\n","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>在元旦之前，本想炫技生成漂亮的数独图案的题目然后发在朋友圈祝朋友们节日快乐。可惜是技术实在不过关。</p>\n<h1 id=\"数独图形\"><a href=\"#数独图形\" class=\"headerlink\" title=\"数独图形\"></a>数独图形</h1><p>在资深的数独迷眼里,标准数独是指通过盘面上的所有提示数字，有且仅有唯一解。<br>以下四个图形，虽说有“元旦快乐”的四个字样，但是并不具备唯一解。  </p>\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/元初始状态.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/旦初始状态.png\"></div>\n</div>\n\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/快初始状态.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/乐初始状态.png\"></div>\n</div>\n\n<p>我们可以经由DLX算法可以快速得知<br>以上“元旦快乐”四个数字的可能解的个数是分别是512,8388,66,285。</p>\n<h1 id=\"标准数独的基本条件\"><a href=\"#标准数独的基本条件\" class=\"headerlink\" title=\"标准数独的基本条件\"></a>标准数独的基本条件</h1><blockquote>\n<p>盘面至少<strong>17</strong>个数字。<br>每一大行中没有两个空行,即第一，二，三行必须有两行存在数字。<br>每一大列中没有两个空列,即第一，二，三列必须有两列存在数字。<br>盘面至少有<strong>8</strong>个不同的已知数字。<br>即<strong>元</strong>字的r3c8会有个<strong>2</strong>的存在是为了避免第一和第三行可以互换,不满足数独唯一性的必要条件。</p>\n</blockquote>\n<h1 id=\"求解过程\"><a href=\"#求解过程\" class=\"headerlink\" title=\"求解过程\"></a>求解过程</h1><p>以元字的表达式为例</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 元表达式</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> before = <span class=\"keyword\">new</span> <span class=\"type\">DanceLink</span>().solution_count(<span class=\"string\">&quot;000000000001234500000000020134659782000308000000402000000703004009006007070001358&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 元的第一个已知数据和第二个已知数据交换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> after  = <span class=\"keyword\">new</span> <span class=\"type\">DanceLink</span>().solution_count(<span class=\"string\">&quot;000000000002134500000000020134659782000308000000402000000703004009006007070001358&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>输出的结果是</p>\n<figure class=\"highlight abnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">before</span> <span class=\"operator\">=</span> <span class=\"number\">512</span><span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"attribute\">after</span>  <span class=\"operator\">=</span> <span class=\"number\">312</span><span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<p>所以最终解可以由after的表达式进行进一步的两两交换去生成。<br>由因为A的已知数据是30个，所以位置的交换有30*29/2=435种。<br>整个交换的执行流程如下：<br>1、建立一个尝试字典集tryDic,键是数独的表达式,值是数独的结果的可能个数。<br>2、30个位置进行组合，生成435个包含两个位置的集合。<br>3、数独表达式交换前后分别记为before,after,解的个数分别记作b,a,将before,after及其结果数存入tryDic。<br>4、对435个集合进行遍历,若a!=0,且a小于b,则before=after;<br>5、很有可能第一轮排列组合之后,a并不等于1;没有找到唯一解的数独表达式,选取tryDic的结果个数最多的字符串S出来作为下一轮循环的因子。<br>6、循环执行1~5的过程，<strong>注意步骤5中的字符串S应该是过往循环中没有使用过的，否则会陷入死循环。</strong></p>\n<p>书上以</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">001000009000200046007080000000001000003000200000500000000030800960007000200000500</span><br></pre></td></tr></table></figure>\n<p>这个18个提示数的数独作为例子作为讲解，我也通过以上流程生成了一个18个提示数的标准数独。</p>\n<blockquote>\n<p>借助书上的说法,除了聪明和运气，我们别无他法。</p>\n</blockquote>\n<h1 id=\"标准数独-元旦快乐\"><a href=\"#标准数独-元旦快乐\" class=\"headerlink\" title=\"标准数独(元旦快乐)\"></a>标准数独(元旦快乐)</h1><p>最终生成的结果如下，难度不大。</p>\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/元.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/旦.png\"></div>\n</div>\n\n<div style=\"clear:both; width:800px\">\n<div style=\"float:left;width:400px\"> <img src=\"/photos/images/快.png\"></div>\n<div style=\"float:right;width:400px\"><img src=\"/photos/images/乐.png\"></div>\n</div>\n\n<h1 id=\"逆向思维\"><a href=\"#逆向思维\" class=\"headerlink\" title=\"逆向思维\"></a>逆向思维</h1><p>由以上位置找固定数独的位置可知，如果标准数独去掉某个提示数，不在构成唯一解，但是满足构成标准数独的基本条件,则可能通过两两交换的生成一个新的标准数独。</p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><ul>\n<li><a href=\"https://www.cnblogs.com/zhao-yi/p/8533035.html\">C#实现排列、组合</a></li>\n<li><a href=\"https://github.com/ddabb/soduku\">C#源码</a></li>\n</ul>\n","categories":[{"name":"数独之趣","path":"api/categories/数独之趣.json"}],"tags":[{"name":"排列组合","path":"api/tags/排列组合.json"},{"name":"数独","path":"api/tags/数独.json"},{"name":"固定位置","path":"api/tags/固定位置.json"}]}
{"title":"用Dictionary替换switch case的注意事项","slug":"Notes_On_Switch_Convert_to_Dictionary","date":"2019-01-21T15:40:18.000Z","updated":"2023-09-08T06:12:36.546Z","comments":true,"path":"api/articles/Notes_On_Switch_Convert_to_Dictionary.json","excerpt":null,"covers":["/.com//%E5%B7%AE%E5%BC%82%E5%AF%B9%E6%AF%94.png","/.com//%E6%AD%A3%E7%A1%AE%E9%87%8D%E6%9E%84.png"],"content":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>最近试图重构一段现做现卖的祖传代码,结果改完之后,性能急速下降,下面给出示意代码的截图,以便提醒自己工作需要更加认真和细心。  </p>\n<h1 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h1><h2 id=\"错误的重构\"><a href=\"#错误的重构\" class=\"headerlink\" title=\"错误的重构\"></a>错误的重构</h2><p><img src=\"/.com//%E5%B7%AE%E5%BC%82%E5%AF%B9%E6%AF%94.png\" alt=\"差异对比\"><br>Dictionary的执行时间竟然是Switch case的四倍以上？原因是啥？我们来看一下各个动物的构造函数<br><img src=\"/.com//%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png\" alt=\"构造函数\"><br>即生成Dictionary的每一个键值对的值的时候,都实例化了一个Animal的子类,每个子类的实例化都等待了十秒钟,总实例化就耗费了40秒钟。</p>\n<h2 id=\"正确的重构\"><a href=\"#正确的重构\" class=\"headerlink\" title=\"正确的重构\"></a>正确的重构</h2><p><img src=\"/.com//%E6%AD%A3%E7%A1%AE%E9%87%8D%E6%9E%84.png\" alt=\"正确重构\"><br>先获取对象的type,然后通过Activator.CreateInstance(type)创建对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>switch case转换成dictionary算得上是一种重构,起到了<strong>减少代码量，提高可维护性的效果。</strong><br>这次我的失误也算是明白了一个深刻的道理,所有的重构需要建立在完整的测试机制的前提下，否则可能会造成严重的损失。<br>最后一句箴言<font color=\"#FF0000\">如无必要，勿动祖传代码</font></p>\n","more":"<h1 id=\"序\"><a href=\"#序\" class=\"headerlink\" title=\"序\"></a>序</h1><p>最近试图重构一段现做现卖的祖传代码,结果改完之后,性能急速下降,下面给出示意代码的截图,以便提醒自己工作需要更加认真和细心。  </p>\n<h1 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h1><h2 id=\"错误的重构\"><a href=\"#错误的重构\" class=\"headerlink\" title=\"错误的重构\"></a>错误的重构</h2><p><img src=\"/.com//%E5%B7%AE%E5%BC%82%E5%AF%B9%E6%AF%94.png\" alt=\"差异对比\"><br>Dictionary的执行时间竟然是Switch case的四倍以上？原因是啥？我们来看一下各个动物的构造函数<br><img src=\"/.com//%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0.png\" alt=\"构造函数\"><br>即生成Dictionary的每一个键值对的值的时候,都实例化了一个Animal的子类,每个子类的实例化都等待了十秒钟,总实例化就耗费了40秒钟。</p>\n<h2 id=\"正确的重构\"><a href=\"#正确的重构\" class=\"headerlink\" title=\"正确的重构\"></a>正确的重构</h2><p><img src=\"/.com//%E6%AD%A3%E7%A1%AE%E9%87%8D%E6%9E%84.png\" alt=\"正确重构\"><br>先获取对象的type,然后通过Activator.CreateInstance(type)创建对象。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>switch case转换成dictionary算得上是一种重构,起到了<strong>减少代码量，提高可维护性的效果。</strong><br>这次我的失误也算是明白了一个深刻的道理,所有的重构需要建立在完整的测试机制的前提下，否则可能会造成严重的损失。<br>最后一句箴言<font color=\"#FF0000\">如无必要，勿动祖传代码</font></p>\n","categories":[{"name":"代码世界","path":"api/categories/代码世界.json"}],"tags":[{"name":"重构","path":"api/tags/重构.json"}]}